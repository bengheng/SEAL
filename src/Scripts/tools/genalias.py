#!/usr/bin/python

import os
import hashlib
import logging
import subprocess
import sys

import cloak.address
import cloak.alias
from cloak.db import DB
from cloak.alias import Alias
from cloak.address import Address
from cloak.user import User
from cloak.config import Config

CONTACTSUSER  = "cloakcontactpage"
CON_ALIASNAME = "cloakinfo"

# randomly generated by http://www.random.org/sequences/
perm = [23, 18, 6, 5, 33, 9, 19, 3, 29, 34, 25, 31, 24, 38,	\
	30, 7, 13, 16, 21, 14, 35, 4, 22, 2, 15, 28, 36, 27,	\
	10, 0, 1, 20, 39, 8, 11, 17, 12, 26, 32, 37]

def ipstr_to_rand(ip_addr):
	ip_sep = ip_addr.split('.')
        ip_bin = map(lambda x: bin(int(x))[2:], ip_sep)
        ip_bin_full = map(lambda x: ('0'*8)[0:8-len(x)] + x, ip_bin)
        ip_string = ''.join(ip_bin_full)

	# ip address is only 32 bits, but rand string is 40, so we use
	# the first byte of the addr's sha hash for the rest;
	iphashbits = bin(int(hashlib.sha256(ip_string).hexdigest()[0:2],16))[2:]
	iphashbits = ('0'*8)[0:8-len(iphashbits)] + iphashbits

	full_str = ip_string + iphashbits
	rand_int = reduce(lambda x, y: 2*x + int(full_str[y]), perm, 0)

	return rand_int

# generate revperm
revperm = range(len(perm))
for i in range(len(revperm)):
	revperm[perm[i]] = i

def rand_to_ipstr(rand_str):
	rint = bin(cloak.alias.rstr_to_rint(rand_str))[2:]
	ipbin = ('0'*8)[0:40-len(rint)] + rint
	derand_ipbin = map(lambda x: ipbin[x], revperm)
	derand_ipbin = reduce(lambda x, y: x+y, derand_ipbin, '')

	ipres = [-1, -1, -1, -1]
	ipres[0] = int(derand_ipbin[0:8],2)
	ipres[1] = int(derand_ipbin[8:16],2)
	ipres[2] = int(derand_ipbin[16:24],2)
	ipres[3] = int(derand_ipbin[24:32],2)
	iphash   = hex(int(derand_ipbin[32:40],2))[2:]
	iphash   = ('0'*2)[0:2-len(iphash)] + iphash

	if iphash.lower() != hashlib.sha256(derand_ipbin[0:32]).hexdigest()[0:2]:
		print "Hash doesn't match. That's strange..."
		print iphash.lower()
		print hashlib.sha256(derand_ipbin[0:32]).hexdigest()[0:2]

	ipstr = '%d.%d.%d.%d' % tuple(ipres)

	return ipstr
	

def create_alias_helper(user, aliasname, randint, rcpt=None):
	""" Helper function to create alias.
	Generates <rand> for user for the <aliasname> specified in "Subject".
	If <aliasname> belonging to the user already exists, the existing aid is used.
	If <aliasname> belonging to another user already exists, an error is returned.
	"""
	(aid, uid) = db.get_aliasname_data(aliasname)
	uids = [[uid]]
	if uids == None:
		logging.fatal("No owner for \"%s\"!" % aliasname)
		return None;

	num_uids = len(uids)
	aliasname_owner = None
	if num_uids > 1:
		logging.fatal("uid count for \"%s\" exceeds 1!" % aliasname)
		return None
	elif num_uids == 1:
		aliasname_owner = uids[0][0]

	# Error if user doesn't own the aliasname
	if aliasname_owner != None and aliasname_owner != user.get_uid():
		logging.info('User %d does not own \"%s\".' % (user.get_uid(), aliasname))
		return None

	#
	# Now, aliasname either belongs to the user or is not in use.
	#

	# Gets the alias id, either by getting an existing one or create a new one.
	newaid = None
	if aliasname_owner == user.get_uid():
		newaid = db.get_aliasname_data(aliasname)[0]
		logging.debug('Using existing aid %d for aliasname \"%s\"' %	\
			(newaid, aliasname))
	elif aliasname_owner == None:
		newaid = db.insert_alias(user.get_uid(), aliasname)
		logging.debug('Created new aid %d for aliasname \"%s\"' %	\
			(newaid, aliasname))
	if newaid == None:
		return None

	#
	# If a recipient is given, check history to see if there was any
	# previously generated <rand> that we can use.
	# TODO: We might have to make sure the recipient is active.
	#

	newalias = None
	oldalias = None #db.get_alias_from_aid(user.get_uid(), newaid)

	rid = None
	if False: #oldalias != None:
		rid = oldalias['rid']

		# Found a history correspondence
		hist_alias = Alias(self.db.get_alias_data(rid))
		hist_aliasname, hist_aliasrand = hist_alias.get_alias_pair()

		logging.debug('History aliasname\t:"%s"',\
			hist_aliasname)

		if hist_aliasname == aliasname:
			logging.debug('Reuse history aliasrand\t:"%s"' \
				% hist_aliasrand)
			newalias = Alias(hist_aliasname, hist_aliasrand)
		else:
			# Can't use the rid found since aliasname defers
			rid = None


	# Create a new alias (aka aliasrand or <aliasname>.<rand>)
	if newalias == None:
		logging.debug('Generating new aliasrand')
#		newalias = Alias(aliasname, cloak.alias.generate_rint())
		newalias = Alias(aliasname, randint)

	logging.debug('Using alias\t\t: %s' % newalias)

	# Update aid, uid and set isactive for new alias
	newalias.set_values(aid=newaid, uid=user.get_uid(), isactive=1)

	# Sets up alias pair
	alias_pair = newalias.get_alias_pair()

	# If we don't have rid yet, insert aliasrand to DB and mark as active
	if rid == None:
		#logging.debug('Inserting aliasrand %s', alias.rint_to_rstr(alias_pair[1]))
		rid = db.insert_aliasrnd(user.get_uid(),	\
			newaid,					\
			alias_pair[0], alias_pair[1],		\
			1)
#	if rid == None:
#		return None

	# Creates the alias address, which includes the domain
	aliasaddx = Address(newalias.get_alias_address())
	logging.info('Aliasrnd Address\t\t: %s', str(aliasaddx))
	return aliasaddx



# The list that follows was taken from
# http://www.java2s.com/Open-Source/Python/Security/PyCrypto/
#        pycrypto-2.0.1/Util/RFC1751.py.htm

# rfc1751.py : Converts between 128-bit strings and a human-readable
# sequence of words, as defined in RFC1751: "A Convention for
# Human-Readable 128-bit Keys", by Daniel L. McDonald.

wordlist=[ "a", "abe", "ace", "act", "ad", "ada", "add",
   "ago", "aid", "aim", "air", "all", "alp", "am", "amy", "an", "ana",
   "and", "ann", "ant", "any", "ape", "aps", "apt", "arc", "are", "ark",
   "arm", "art", "as", "ash", "ask", "at", "ate", "aug", "auk", "ave",
   "awe", "awk", "awl", "awn", "ax", "aye", "bad", "bag", "bah", "bam",
   "ban", "bar", "bat", "bay", "be", "bed", "bee", "beg", "ben", "bet",
   "bey", "bib", "bid", "big", "bin", "bit", "bob", "bog", "bon", "boo",
   "bop", "bow", "boy", "bub", "bud", "bug", "bum", "bun", "bus", "but",
   "buy", "by", "bye", "cab", "cal", "cam", "can", "cap", "car", "cat",
   "caw", "cod", "cog", "col", "con", "coo", "cop", "cot", "cow", "coy",
   "cry", "cub", "cue", "cup", "cur", "cut", "dab", "dad", "dam", "dan",
   "dar", "day", "dee", "del", "den", "des", "dew", "did", "die", "dig",
   "din", "dip", "do", "doe", "dog", "don", "dot", "dow", "dry", "dub",
   "dud", "due", "dug", "dun", "ear", "eat", "ed", "eel", "egg", "ego",
   "eli", "elk", "elm", "ely", "em", "end", "est", "etc", "eva", "eve",
   "ewe", "eye", "fad", "fan", "far", "fat", "fay", "fed", "fee", "few",
   "fib", "fig", "fin", "fir", "fit", "flo", "fly", "foe", "fog", "for",
   "fry", "fum", "fun", "fur", "gab", "gad", "gag", "gal", "gam", "gap",
   "gas", "gay", "gee", "gel", "gem", "get", "gig", "gil", "gin", "go",
   "got", "gum", "gun", "gus", "gut", "guy", "gym", "gyp", "ha", "had",
   "hal", "ham", "han", "hap", "has", "hat", "haw", "hay", "he", "hem",
   "hen", "her", "hew", "hey", "hi", "hid", "him", "hip", "his", "hit",
   "ho", "hob", "hoc", "hoe", "hog", "hop", "hot", "how", "hub", "hue",
   "hug", "huh", "hum", "hut", "i", "icy", "ida", "if", "ike", "ill",
   "ink", "inn", "io", "ion", "iq", "ira", "ire", "irk", "is", "it",
   "its", "ivy", "jab", "jag", "jam", "jan", "jar", "jaw", "jay", "jet",
   "jig", "jim", "jo", "job", "joe", "jog", "jot", "joy", "jug", "jut",
   "kay", "keg", "ken", "key", "kid", "kim", "kin", "kit", "la", "lab",
   "lac", "lad", "lag", "lam", "lap", "law", "lay", "lea", "led", "lee",
   "leg", "len", "leo", "let", "lew", "lid", "lie", "lin", "lip", "lit",
   "lo", "lob", "log", "lop", "los", "lot", "lou", "low", "loy", "lug",
   "lye", "ma", "mac", "mad", "mae", "man", "mao", "map", "mat", "maw",
   "may", "me", "meg", "mel", "men", "met", "mew", "mid", "min", "mit",
   "mob", "mod", "moe", "moo", "mop", "mos", "mot", "mow", "mud", "mug",
   "mum", "my", "nab", "nag", "nan", "nap", "nat", "nay", "ne", "ned",
   "nee", "net", "new", "nib", "nil", "nip", "nit", "no", "nob", "nod",
   "non", "nor", "not", "nov", "now", "nu", "nun", "nut", "o", "oaf",
   "oak", "oar", "oat", "odd", "ode", "of", "off", "oft", "oh", "oil",
   "ok", "old", "on", "one", "or", "orb", "ore", "orr", "os", "ott",
   "our", "out", "ova", "ow", "owe", "owl", "own", "ox", "pa", "pad",
   "pal", "pam", "pan", "pap", "par", "pat", "paw", "pay", "pea", "peg",
   "pen", "pep", "per", "pet", "pew", "phi", "pi", "pie", "pin", "pit",
   "ply", "po", "pod", "poe", "pop", "pot", "pow", "pro", "pry", "pub",
   "pug", "pun", "pup", "put", "quo", "rag", "ram", "ran", "rap", "rat",
   "raw", "ray", "reb", "red", "rep", "ret", "rib", "rid", "rig", "rim",
   "rio", "rip", "rob", "rod", "roe", "ron", "rot", "row", "roy", "rub",
   "rue", "rug", "rum", "run", "rye", "sac", "sad", "sag", "sal", "sam",
   "san", "sap", "sat", "saw", "say", "sea", "sec", "see", "sen", "set",
   "sew", "she", "shy", "sin", "sip", "sir", "sis", "sit", "ski", "sky",
   "sly", "so", "sob", "sod", "son", "sop", "sow", "soy", "spa", "spy",
   "sub", "sud", "sue", "sum", "sun", "sup", "tab", "tad", "tag", "tan",
   "tap", "tar", "tea", "ted", "tee", "ten", "the", "thy", "tic", "tie",
   "tim", "tin", "tip", "to", "toe", "tog", "tom", "ton", "too", "top",
   "tow", "toy", "try", "tub", "tug", "tum", "tun", "two", "un", "up",
   "us", "use", "van", "vat", "vet", "vie", "wad", "wag", "war", "was",
   "way", "we", "web", "wed", "wee", "wet", "who", "why", "win", "wit",
   "wok", "won", "woo", "wow", "wry", "wu", "yam", "yap", "yaw", "ye",
   "yea", "yes", "yet", "you", "abed", "abel", "abet", "able", "abut",
   "ache", "acid", "acme", "acre", "acta", "acts", "adam", "adds",
   "aden", "afar", "afro", "agee", "ahem", "ahoy", "aida", "aide",
   "aids", "airy", "ajar", "akin", "alan", "alec", "alga", "alia",
   "ally", "alma", "aloe", "also", "alto", "alum", "alva", "amen",
   "ames", "amid", "ammo", "amok", "amos", "amra", "andy", "anew",
   "anna", "anne", "ante", "anti", "aqua", "arab", "arch", "area",
   "argo", "arid", "army", "arts", "arty", "asia", "asks", "atom",
   "aunt", "aura", "auto", "aver", "avid", "avis", "avon", "avow",
   "away", "awry", "babe", "baby", "bach", "back", "bade", "bail",
   "bait", "bake", "bald", "bale", "bali", "balk", "ball", "balm",
   "band", "bane", "bang", "bank", "barb", "bard", "bare", "bark",
   "barn", "barr", "base", "bash", "bask", "bass", "bate", "bath",
   "bawd", "bawl", "bead", "beak", "beam", "bean", "bear", "beat",
   "beau", "beck", "beef", "been", "beer",
   "beet", "bela", "bell", "belt", "bend", "bent", "berg", "bern",
   "bert", "bess", "best", "beta", "beth", "bhoy", "bias", "bide",
   "bien", "bile", "bilk", "bill", "bind", "bing", "bird", "bite",
   "bits", "blab", "blat", "bled", "blew", "blob", "bloc", "blot",
   "blow", "blue", "blum", "blur", "boar", "boat", "boca", "bock",
   "bode", "body", "bogy", "bohr", "boil", "bold", "bolo", "bolt",
   "bomb", "bona", "bond", "bone", "bong", "bonn", "bony", "book",
   "boom", "boon", "boot", "bore", "borg", "born", "bose", "boss",
   "both", "bout", "bowl", "boyd", "brad", "brae", "brag", "bran",
   "bray", "bred", "brew", "brig", "brim", "brow", "buck", "budd",
   "buff", "bulb", "bulk", "bull", "bunk", "bunt", "buoy", "burg",
   "burl", "burn", "burr", "burt", "bury", "bush", "buss", "bust",
   "busy", "byte", "cady", "cafe", "cage", "cain", "cake", "calf",
   "call", "calm", "came", "cane", "cant", "card", "care", "carl",
   "carr", "cart", "case", "cash", "cask", "cast", "cave", "ceil",
   "cell", "cent", "cern", "chad", "char", "chat", "chaw", "chef",
   "chen", "chew", "chic", "chin", "chou", "chow", "chub", "chug",
   "chum", "cite", "city", "clad", "clam", "clan", "claw", "clay",
   "clod", "clog", "clot", "club", "clue", "coal", "coat", "coca",
   "cock", "coco", "coda", "code", "cody", "coed", "coil", "coin",
   "coke", "cola", "cold", "colt", "coma", "comb", "come", "cook",
   "cool", "coon", "coot", "cord", "core", "cork", "corn", "cost",
   "cove", "cowl", "crab", "crag", "cram", "cray", "crew", "crib",
   "crow", "crud", "cuba", "cube", "cuff", "cull", "cult", "cuny",
   "curb", "curd", "cure", "curl", "curt", "cuts", "dade", "dale",
   "dame", "dana", "dane", "dang", "dank", "dare", "dark", "darn",
   "dart", "dash", "data", "date", "dave", "davy", "dawn", "days",
   "dead", "deaf", "deal", "dean", "dear", "debt", "deck", "deed",
   "deem", "deer", "deft", "defy", "dell", "dent", "deny", "desk",
   "dial", "dice", "died", "diet", "dime", "dine", "ding", "dint",
   "dire", "dirt", "disc", "dish", "disk", "dive", "dock", "does",
   "dole", "doll", "dolt", "dome", "done", "doom", "door", "dora",
   "dose", "dote", "doug", "dour", "dove", "down", "drab", "drag",
   "dram", "draw", "drew", "drub", "drug", "drum", "dual", "duck",
   "duct", "duel", "duet", "duke", "dull", "dumb", "dune", "dunk",
   "dusk", "dust", "duty", "each", "earl", "earn", "ease", "east",
   "easy", "eben", "echo", "eddy", "eden", "edge", "edgy", "edit",
   "edna", "egan", "elan", "elba", "ella", "else", "emil", "emit",
   "emma", "ends", "eric", "eros", "even", "ever", "evil", "eyed",
   "face", "fact", "fade", "fail", "fain", "fair", "fake", "fall",
   "fame", "fang", "farm", "fast", "fate", "fawn", "fear", "feat",
   "feed", "feel", "feet", "fell", "felt", "fend", "fern", "fest",
   "feud", "fief", "figs", "file", "fill", "film", "find", "fine",
   "fink", "fire", "firm", "fish", "fisk", "fist", "fits", "five",
   "flag", "flak", "flam", "flat", "flaw", "flea", "fled", "flew",
   "flit", "floc", "flog", "flow", "flub", "flue", "foal", "foam",
   "fogy", "foil", "fold", "folk", "fond", "font", "food", "fool",
   "foot", "ford", "fore", "fork", "form", "fort", "foss", "foul",
   "four", "fowl", "frau", "fray", "fred", "free", "fret", "frey",
   "frog", "from", "fuel", "full", "fume", "fund", "funk", "fury",
   "fuse", "fuss", "gaff", "gage", "gail", "gain", "gait", "gala",
   "gale", "gall", "galt", "game", "gang", "garb", "gary", "gash",
   "gate", "gaul", "gaur", "gave", "gawk", "gear", "geld", "gene",
   "gent", "germ", "gets", "gibe", "gift", "gild", "gill", "gilt",
   "gina", "gird", "girl", "gist", "give", "glad", "glee", "glen",
   "glib", "glob", "glom", "glow", "glue", "glum", "glut", "goad",
   "goal", "goat", "goer", "goes", "gold", "golf", "gone", "gong",
   "good", "goof", "gore", "gory", "gosh", "gout", "gown", "grab",
   "grad", "gray", "greg", "grew", "grey", "grid", "grim", "grin",
   "grit", "grow", "grub", "gulf", "gull", "gunk", "guru", "gush",
   "gust", "gwen", "gwyn", "haag", "haas", "hack", "hail", "hair",
   "hale", "half", "hall", "halo", "halt", "hand", "hang", "hank",
   "hans", "hard", "hark", "harm", "hart", "hash", "hast", "hate",
   "hath", "haul", "have", "hawk", "hays", "head", "heal", "hear",
   "heat", "hebe", "heck", "heed", "heel", "heft", "held", "hell",
   "helm", "herb", "herd", "here", "hero", "hers", "hess", "hewn",
   "hick", "hide", "high", "hike", "hill", "hilt", "hind", "hint",
   "hire", "hiss", "hive", "hobo", "hock", "hoff", "hold", "hole",
   "holm", "holt", "home", "hone", "honk", "hood", "hoof", "hook",
   "hoot", "horn", "hose", "host", "hour", "hove", "howe", "howl",
   "hoyt", "huck", "hued", "huff", "huge", "hugh", "hugo", "hulk",
   "hull", "hunk", "hunt", "hurd", "hurl", "hurt", "hush", "hyde",
   "hymn", "ibis", "icon", "idea", "idle", "iffy", "inca", "inch",
   "into", "ions", "iota", "iowa", "iris", "irma", "iron", "isle",
   "itch", "item", "ivan", "jack", "jade", "jail", "jake", "jane",
   "java", "jean", "jeff", "jerk", "jess", "jest", "jibe", "jill",
   "jilt", "jive", "joan", "jobs", "jock", "joel", "joey", "john",
   "join", "joke", "jolt", "jove", "judd", "jude", "judo", "judy",
   "juju", "juke", "july", "june", "junk", "juno", "jury", "just",
   "jute", "kahn", "kale", "kane", "kant", "karl", "kate", "keel",
   "keen", "keno", "kent", "kern", "kerr", "keys", "kick", "kill",
   "kind", "king", "kirk", "kiss", "kite", "klan", "knee", "knew",
   "knit", "knob", "knot", "know", "koch", "kong", "kudo", "kurd",
   "kurt", "kyle", "lace", "lack", "lacy", "lady", "laid", "lain",
   "lair", "lake", "lamb", "lame", "land", "lane", "lang", "lard",
   "lark", "lass", "last", "late", "laud", "lava", "lawn", "laws",
   "lays", "lead", "leaf", "leak", "lean", "lear", "leek", "leer",
   "left", "lend", "lens", "lent", "leon", "lesk", "less", "lest",
   "lets", "liar", "lice", "lick", "lied", "lien", "lies", "lieu",
   "life", "lift", "like", "lila", "lilt", "lily", "lima", "limb",
   "lime", "lind", "line", "link", "lint", "lion", "lisa", "list",
   "live", "load", "loaf", "loam", "loan", "lock", "loft", "loge",
   "lois", "lola", "lone", "long", "look", "loon", "loot", "lord",
   "lore", "lose", "loss", "lost", "loud", "love", "lowe", "luck",
   "lucy", "luge", "luke", "lulu", "lund", "lung", "lura", "lure",
   "lurk", "lush", "lust", "lyle", "lynn", "lyon", "lyra", "mace",
   "made", "magi", "maid", "mail", "main", "make", "male", "mali",
   "mall", "malt", "mana", "mann", "many", "marc", "mare", "mark",
   "mars", "mart", "mary", "mash", "mask", "mass", "mast", "mate",
   "math", "maul", "mayo", "mead", "meal", "mean", "meat", "meek",
   "meet", "meld", "melt", "memo", "mend", "menu", "mert", "mesh",
   "mess", "mice", "mike", "mild", "mile", "milk", "mill", "milt",
   "mimi", "mind", "mine", "mini", "mink", "mint", "mire", "miss",
   "mist", "mite", "mitt", "moan", "moat", "mock", "mode", "mold",
   "mole", "moll", "molt", "mona", "monk", "mont", "mood", "moon",
   "moor", "moot", "more", "morn", "mort", "moss", "most", "moth",
   "move", "much", "muck", "mudd", "muff", "mule", "mull", "murk",
   "mush", "must", "mute", "mutt", "myra", "myth", "nagy", "nail",
   "nair", "name", "nary", "nash", "nave", "navy", "neal", "near",
   "neat", "neck", "need", "neil", "nell", "neon", "nero", "ness",
   "nest", "news", "newt", "nibs", "nice", "nick", "nile", "nina",
   "nine", "noah", "node", "noel", "noll", "none", "nook", "noon",
   "norm", "nose", "note", "noun", "nova", "nude", "null", "numb",
   "oath", "obey", "oboe", "odin", "ohio", "oily", "oint", "okay",
   "olaf", "oldy", "olga", "olin", "oman", "omen", "omit", "once",
   "ones", "only", "onto", "onus", "oral", "orgy", "oslo", "otis",
   "otto", "ouch", "oust", "outs", "oval", "oven", "over", "owly",
   "owns", "quad", "quit", "quod", "race", "rack", "racy", "raft",
   "rage", "raid", "rail", "rain", "rake", "rank", "rant", "rare",
   "rash", "rate", "rave", "rays", "read", "real", "ream", "rear",
   "reck", "reed", "reef", "reek", "reel", "reid", "rein", "rena",
   "rend", "rent", "rest", "rice", "rich", "rick", "ride", "rift",
   "rill", "rime", "ring", "rink", "rise", "risk", "rite", "road",
   "roam", "roar", "robe", "rock", "rode", "roil", "roll", "rome",
   "rood", "roof", "rook", "room", "root", "rosa", "rose", "ross",
   "rosy", "roth", "rout", "rove", "rowe", "rows", "rube", "ruby",
   "rude", "rudy", "ruin", "rule", "rung", "runs", "runt", "ruse",
   "rush", "rusk", "russ", "rust", "ruth", "sack", "safe", "sage",
   "said", "sail", "sale", "salk", "salt", "same", "sand", "sane",
   "sang", "sank", "sara", "saul", "save", "says", "scan", "scar",
   "scat", "scot", "seal", "seam", "sear", "seat", "seed", "seek",
   "seem", "seen", "sees", "self", "sell", "send", "sent", "sets",
   "sewn", "shag", "sham", "shaw", "shay", "shed", "shim", "shin",
   "shod", "shoe", "shot", "show", "shun", "shut", "sick", "side",
   "sift", "sigh", "sign", "silk", "sill", "silo", "silt", "sine",
   "sing", "sink", "sire", "site", "sits", "situ", "skat", "skew",
   "skid", "skim", "skin", "skit", "slab", "slam", "slat", "slay",
   "sled", "slew", "slid", "slim", "slit", "slob", "slog", "slot",
   "slow", "slug", "slum", "slur", "smog", "smug", "snag", "snob",
   "snow", "snub", "snug", "soak", "soar", "sock", "soda", "sofa",
   "soft", "soil", "sold", "some", "song", "soon", "soot", "sore",
   "sort", "soul", "sour", "sown", "stab", "stag", "stan", "star",
   "stay", "stem", "stew", "stir", "stow", "stub", "stun", "such",
   "suds", "suit", "sulk", "sums", "sung", "sunk", "sure", "surf",
   "swab", "swag", "swam", "swan", "swat", "sway", "swim", "swum",
   "tack", "tact", "tail", "take", "tale", "talk", "tall", "tank",
   "task", "tate", "taut", "teal", "team", "tear", "tech", "teem",
   "teen", "teet", "tell", "tend", "tent", "term", "tern", "tess",
   "test", "than", "that", "thee", "them", "then", "they", "thin",
   "this", "thud", "thug", "tick", "tide", "tidy", "tied", "tier",
   "tile", "till", "tilt", "time", "tina", "tine", "tint", "tiny",
   "tire", "toad", "togo", "toil", "told", "toll", "tone", "tong",
   "tony", "took", "tool", "toot", "tore", "torn", "tote", "tour",
   "tout", "town", "trag", "tram", "tray", "tree", "trek", "trig",
   "trim", "trio", "trod", "trot", "troy", "true", "tuba", "tube",
   "tuck", "tuft", "tuna", "tune", "tung", "turf", "turn", "tusk",
   "twig", "twin", "twit", "ulan", "unit", "urge", "used", "user",
   "uses", "utah", "vail", "vain", "vale", "vary", "vase", "vast",
   "veal", "veda", "veil", "vein", "vend", "vent", "verb", "very",
   "veto", "vice", "view", "vine", "vise", "void", "volt", "vote",
   "wack", "wade", "wage", "wail", "wait", "wake", "wale", "walk",
   "wall", "walt", "wand", "wane", "wang", "want", "ward", "warm",
   "warn", "wart", "wash", "wast", "wats", "watt", "wave", "wavy",
   "ways", "weak", "weal", "wean", "wear", "weed", "week", "weir",
   "weld", "well", "welt", "went", "were", "wert", "west", "wham",
   "what", "whee", "when", "whet", "whoa", "whom", "wick", "wife",
   "wild", "will", "wind", "wine", "wing", "wink", "wino", "wire",
   "wise", "wish", "with", "wolf", "wont", "wood", "wool", "word",
   "wore", "work", "worm", "worn", "wove", "writ", "wynn", "yale",
   "yang", "yank", "yard", "yarn", "yawl", "yawn", "yeah", "year",
   "yell", "yoga", "yoke" ]


if(len(sys.argv) != 3):
	print 'Error!'
	sys.exit(0)

ip_addr = sys.argv[1]
domain  = sys.argv[2]

#readable_ip = ipstr_to_name(ip_addr)
rand_ip = ipstr_to_rand(ip_addr)

os.chdir('/home/john/cloak/src/Scripts')
cfg = Config()
db = DB(cfg)
cloak.alias.cfgdata = cfg
cloak.address.cfgdata = cfg

con_user = db.get_user(username=CONTACTSUSER)

# if not created yet, create new user;
if not con_user:
	p = subprocess.Popen(['/home/john/cloak/src/Scripts/tools/user-add.py', '-d', cfg.DBSRC, '-u', CONTACTSUSER, '-p', CONTACTSUSER, '-a', 'PLAIN', '-f', 'acrowellrutgers@gmail.com'], stdout=subprocess.PIPE)
	res, err = p.communicate()
	#print res
	con_user = db.get_user_from_username(username=CONTACTSUSER)
	pass

con_user = User(**con_user)

ip_alias = create_alias_helper(con_user, CON_ALIASNAME, rand_ip)

#print readable_ip
print str(ip_alias)

testo = ip_alias.localpart.split('.')[1]
print rand_to_ipstr(testo)

